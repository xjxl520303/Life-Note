/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  PLUGIN_ID: () => PLUGIN_ID,
  default: () => IIPlugin2
});
module.exports = __toCommonJS(main_exports);

// src/ui/Settings.ts
var import_obsidian5 = require("obsidian");

// src/config/config.ts
var markdownCodes = [
  { key: "H1", name: "\u6807\u98981", code: "# " },
  { key: "H2", name: "\u6807\u98982", code: "## " },
  { key: "H3", name: "\u6807\u98983", code: "### " },
  { key: "H4", name: "\u6807\u98984", code: "#### " },
  { key: "H5", name: "\u6807\u98985", code: "##### " },
  { key: "H6", name: "\u6807\u98986", code: "###### " },
  { key: "Tag", name: "\u6807\u7B7E", code: "#" },
  { key: "Bold", name: "\u52A0\u7C97", code: "**{}**", cursor: -2 },
  { key: "Italic", name: "\u659C\u4F53", code: "*{}*", cursor: -1 },
  { key: "Strikethrough", name: "\u5220\u9664\u7EBF", code: "~~{}~~", cursor: -2 },
  { key: "Highlight", name: "\u9AD8\u4EAE", code: "=={}==", cursor: -2 },
  { key: "Underline", name: "\u4E0B\u5212\u7EBF", code: "<u>{}</u>", cursor: -4 },
  { key: "Horizontal rule", name: "\u5206\u5272\u7EBF", code: "---\n" },
  { key: "Date", name: "\u65E5\u671F", code: "YYYY-MM-DD ddd" },
  { key: "Time", name: "\u65F6\u95F4", code: "YYYY-MM-DD HH:mm:ss" },
  { key: "Color", name: "\u989C\u8272", code: '<font color="{1}">{2}</font>', cursor: -7 },
  { key: "Background color", name: "\u80CC\u666F\u8272", code: '<span style="background:{1}">{2}</span>', cursor: -7 },
  { key: "Indent", name: "\u7F29\u8FDB", code: "	" },
  { key: "Sup", name: "\u4E0A\u6807", code: "<sup>{}</sup>", cursor: -6 },
  { key: "Sub", name: "\u4E0B\u6807", code: "<sub>{}</sub>", cursor: -6 },
  { key: "Bullet list", name: "\u65E0\u5E8F\u5217\u8868", code: "- " },
  { key: "Numbered list", name: "\u6709\u5E8F\u5217\u8868", code: "1. " },
  { key: "Task list", name: "\u4EFB\u52A1\u5217\u8868", code: "- [ ] " },
  { key: "Quote", name: "\u5F15\u7528", code: "> " },
  { key: "Code", name: "\u884C\u5185\u4EE3\u7801", code: "`{}`", cursor: -1 },
  { key: "Code block", name: "\u4EE3\u7801\u5757", code: "```\n{}\n```", cursor: -3 },
  { key: "Link", name: "\u94FE\u63A5", code: '[{1}]({2} "{3}")', cursor: -4 },
  { key: "Image", name: "\u56FE\u7247", code: '![{1}]({2} "{3}")', cursor: -4 },
  { key: "Table", name: "\u8868\u683C", code: "| | |\n|:-:|:-:|\n| | |" },
  { key: "Audio", name: "\u97F3\u9891", code: '<audio controls="controls" preload="none" src="{1}"></audio>', cursor: -10 },
  { key: "Video", name: "\u89C6\u9891", code: '<video width="{1}" height="{2}" controls><source src="{3}" type="video/{4}"></video>', cursor: -27 },
  { key: "Iframe", name: "\u5D4C\u5165\u7F51\u9875", code: '<iframe width="{1}" height="{2}" src="{3}" scrolling="auto" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>', cursor: -96 },
  { key: "Align left", name: "\u5DE6\u5BF9\u9F50", code: '<div align="left">{}</div>', cursor: -6 },
  { key: "Align right", name: "\u53F3\u5BF9\u9F50", code: '<div align="right">{}</div>', cursor: -6 },
  { key: "Align center", name: "\u5C45\u4E2D\u5BF9\u9F50", code: '<div align="center">{}</div>', cursor: -6 },
  { key: "Align justify", name: "\u4E24\u7AEF\u5BF9\u9F50", code: '<div align="justify">{}</div>', cursor: -6 },
  { key: "Anchor", name: "\u951A\u70B9", code: '[anchor](# "")', cursor: -4 },
  { key: "Variables", name: "\u53D8\u91CF", code: "[title][link]\n[link]: content" },
  { key: "Footnotes", name: "\u811A\u6CE8", code: "content[^1]\n[^1]: comment" },
  { key: "Callout", name: "Callout", code: "> [!NOTE] Title\n> Contents" },
  { key: "Html comment", name: "Html\u6CE8\u91CA", code: "<!-- {} -->", cursor: -4 },
  { key: "Ob comment", name: "Ob\u6CE8\u91CA", code: "%% {} %%", cursor: -3 },
  { key: "Math line", name: "\u884C\u5185\u516C\u5F0F", code: "${}$", cursor: -1 },
  { key: "Math block", name: "\u516C\u5F0F\u5757", code: "$$\n{}\n$$" },
  { key: "Wiki link", name: "Wiki\u94FE\u63A5", code: "[[{}]]", cursor: -2 },
  { key: "Wiki image", name: "Wiki\u56FE\u7247", code: "![[{}]]", cursor: -2 },
  { key: "Block quote", name: "\u5757\u5F15\u7528", code: "[[^]]", cursor: -2 },
  { key: "Block quote global", name: "\u5168\u5C40\u5757\u5F15\u7528", code: "[[^^]]", cursor: -2 },
  //{ key: "Image link", name: "图片链接", code: "[![ImageAlt](Image.png \"Title\")](LinkUrl)", cursor: -1 },
  { key: "Image link", name: "\u56FE\u7247\u94FE\u63A5", code: '<a href=""><img src="" title="" /></a>', cursor: -17 },
  { key: "Email", name: "Email", code: "<name@mail.com>", cursor: -1 },
  { key: "PDF", name: "PDF", code: "![[name.pdf#page=number]]", cursor: -1 }
];
var defContextCodes = ["H1", "H2", "H3", "H4", "Link", "Image", "Underline", "Date", "Time", "Color", "Background color", "Align center", "Align right", "Sup", "Sub", "Html comment", "Ob comment", "Callout", "Footnotes", "Audio", "Video", "Iframe"];
var colors = [
  "#e6194B",
  "#3cb44b",
  "#ffe119",
  "#4363d8",
  "#f58231",
  "#911eb4",
  "#42d4f4",
  "#f032e6",
  "#bfef45",
  "#fabed4",
  "#469990",
  "#dcbeff",
  "#9A6324",
  "#fffac8",
  "#800000",
  "#aaffc3",
  "#808000",
  "#ffd8b1",
  "#000075",
  "#a9a9a9",
  "#ffffff",
  "#000000"
];

// src/feature/QuickInsert.ts
var import_obsidian4 = require("obsidian");

// src/ui/ColorPicker.ts
var import_obsidian2 = require("obsidian");

// src/lang/helpers.ts
var import_obsidian = require("obsidian");

// src/lang/locale/ar.ts
var ar_default = {};

// src/lang/locale/cz.ts
var cz_default = {};

// src/lang/locale/da.ts
var da_default = {};

// src/lang/locale/de.ts
var de_default = {};

// src/lang/locale/en.ts
var en_default = {
  //dialog.ts
  "Please input the image address": "Please input the image address",
  "Please input the image alter": "Please input the image alter",
  "Please input the image title": "Please input the image title",
  "Please input the link address": "Please input the link address",
  "Please input the link name": "Please input the link name",
  "Please input the link title": "Please input the link title",
  "Please input the audio address": "Please input the audio address",
  "Please input the video address": "Please input the video address",
  "Please select the type of the video": "Please select the type of the video",
  "Please input the url address": "Please input the url address",
  "Please input the width and height": "Please input the width and height",
  "Must": "Must",
  "Width optional": "Width optional",
  "Height optional": "Height optional",
  "Optional": "Optional",
  //ColorPicker.ts
  "More colors": "More colors",
  "Choose a color": "Choose a color",
  "Use this color": "Use this color",
  //settings.ts
  "Show command in context menu": "Enable context menu",
  "If enabled, the command context menu will be displayed when you right-click.": "If enabled, the commands you have chosen will be displayed in the context menu.",
  "Show color picker modal": "Show Color Selector",
  "If enabled, the color picker modal will be displayed when you click the color command.": "If enabled, the color selection panel will be opened when you trigger the color or background color command.",
  "Common color codes": "Common Color Codes",
  "The color code here will be displayed in the color dialog modal, with each color code on a separate line.": "The color codes here will be shown in the color selection panel, each color code occupies a separate line.",
  "Show image and link modal": "Show Image and Link Options Dialog",
  "If enabled, the dialog will be displayed when you click the link or image command.": "If enabled, the Show More Options dialog will be displayed when you trigger the Image or Link command.",
  "Show media modal": "Show Media Options Dialog",
  "If enabled, the dialog will be displayed when you click the audio, video, iframe command.": "If enabled, the More Options dialog box will be displayed when you trigger the Audio, Video, and Iframe commands.",
  "Show tips in images and link code": "Image and Link Code Placeholder Text",
  "If enabled, tips text will be added when inserting images or link code.": "Enable to display Placeholder Text in the generated image and link code.",
  "Use only standard Markdown code": "Use only standard Markdown formatting",
  "If enabled, only code in standard Markdown format will be generated.": "Enable to generate code using only standard Markdown formatting.",
  "Date format": "Date Formatting",
  "Date formatting codes, Y, M, D, d represent year, month, day, and week respectively.": "Format the code when inserting a date, YYYY, MM, DD, dddd for year, month, day and week respectively.",
  "Time format": "Time Formatting",
  "Time formatting codes, Y, M, D, H, m, s represent year, month, day, hour, minute, and second respectively.": "The code formatting when inserting time, YYYY, MM, DD, HH, mm, ss represents year, month, day, hour, minute and second respectively.",
  "Choose which codes enable": "Choose which commands to turn on",
  "Only the code you checked is added to the list of commands.": "Only the commands you select are added to the Commands panel.",
  "Choose which show in context menu": "Selecting which commands to add to the context menu",
  "Only the code you checked is added to the list of context menu.": "Only the commands you select are added to the context menu.",
  "Custom codes": "User-defined commands",
  'Format: \nName::Code::menu\n\nExample: \nMy Link::<a href="{cursor}">{selection}</a>::menu': 'Format: \nName::Code::menu\n\nExample: \nMy Link::<a href="{cursor}">{selection}</a>::menu',
  "settings.customCodeDesc": '1. each command occupies one line.\n2. Format: Name::Code::menu. \n3. ::menu means add to context menu at the same time.\n4. Variables: {selection} means selected text, {cursor} means cursor position, default is after inserted code. \n5. Lines starting with :: are comments will be ignored. \n6. Line breaks are replaced by \\n.\n7. For escaping ":" use \\: .'
};

// src/lang/locale/en-gb.ts
var en_gb_default = {};

// src/lang/locale/es.ts
var es_default = {};

// src/lang/locale/fr.ts
var fr_default = {};

// src/lang/locale/hi.ts
var hi_default = {};

// src/lang/locale/id.ts
var id_default = {};

// src/lang/locale/it.ts
var it_default = {};

// src/lang/locale/ja.ts
var ja_default = {};

// src/lang/locale/ko.ts
var ko_default = {};

// src/lang/locale/nl.ts
var nl_default = {};

// src/lang/locale/no.ts
var no_default = {};

// src/lang/locale/pl.ts
var pl_default = {};

// src/lang/locale/pt.ts
var pt_default = {};

// src/lang/locale/pt-br.ts
var pt_br_default = {};

// src/lang/locale/ro.ts
var ro_default = {};

// src/lang/locale/ru.ts
var ru_default = {};

// src/lang/locale/tr.ts
var tr_default = {};

// src/lang/locale/zh-cn.ts
var zh_cn_default = {
  //dialog.ts
  "Please input the image address": "\u8BF7\u8F93\u5165\u56FE\u7247\u5730\u5740",
  "Please input the image alter": "\u8BF7\u8F93\u5165\u56FE\u7247\u7684alt",
  "Please input the image title": "\u8BF7\u8F93\u5165\u56FE\u7247\u6807\u9898",
  "Please input the link address": "\u8BF7\u8F93\u5165\u94FE\u63A5\u5730\u5740",
  "Please input the link name": "\u8BF7\u8F93\u5165\u94FE\u63A5\u540D",
  "Please input the link title": "\u8BF7\u8F93\u5165\u94FE\u63A5title",
  "Please input the audio address": "\u8BF7\u8F93\u5165\u97F3\u9891\u5730\u5740",
  "Please input the video address": "\u8BF7\u8F93\u5165\u89C6\u9891\u5730\u5740",
  "Please select the type of the video": "\u8BF7\u9009\u62E9\u89C6\u9891\u7C7B\u578B",
  "Please input the url address": "\u8BF7\u8F93\u5165URL\u5730\u5740",
  "Please input the width and height": "\u8BF7\u8F93\u5165\u5BBD\u5EA6\u548C\u9AD8\u5EA6",
  "Must": "\u5FC5\u586B",
  "Width optional": "\u5BBD\u5EA6\u53EF\u9009",
  "Height optional": "\u9AD8\u5EA6\u53EF\u9009",
  "Optional": "\u53EF\u9009",
  //ColorPicker.ts
  "More colors": "\u66F4\u591A\u989C\u8272",
  "Choose a color": "\u9009\u62E9\u4E00\u4E2A\u989C\u8272",
  "Use this color": "\u7528\u8FD9\u4E2A\u989C\u8272",
  // setting.ts
  "Show command in context menu": "\u5F00\u542F\u53F3\u952E\u83DC\u5355",
  "If enabled, the command context menu will be displayed when you right-click.": "\u5F00\u542F\u540E\uFF0C\u4F60\u9009\u62E9\u7684\u547D\u4EE4\u5C06\u4F1A\u5728\u53F3\u952E\u83DC\u5355\u4E2D\u663E\u793A\u3002",
  "Show color picker modal": "\u663E\u793A\u989C\u8272\u9009\u62E9\u5668",
  "If enabled, the color picker modal will be displayed when you click the color command.": "\u5F00\u542F\u540E\uFF0C\u5F53\u4F60\u89E6\u53D1\u989C\u8272\u6216\u80CC\u666F\u989C\u8272\u547D\u4EE4\u65F6\uFF0C\u5C06\u4F1A\u6253\u5F00\u989C\u8272\u9009\u62E9\u9762\u677F\u3002",
  "Common color codes": "\u5E38\u7528\u989C\u8272\u4EE3\u7801",
  "The color code here will be displayed in the color dialog modal, with each color code on a separate line.": "\u8FD9\u91CC\u7684\u989C\u8272\u4EE3\u7801\u5C06\u4F1A\u5728\u989C\u8272\u9009\u62E9\u9762\u677F\u4E2D\u663E\u793A\uFF0C\u6BCF\u4E2A\u989C\u8272\u4EE3\u7801\u5355\u72EC\u5360\u4E00\u884C\u3002",
  "Show image and link modal": "\u663E\u793A\u56FE\u7247\u548C\u94FE\u63A5\u9009\u9879\u5BF9\u8BDD\u6846",
  "If enabled, the dialog will be displayed when you click the link or image command.": "\u5F00\u542F\u540E\uFF0C\u5F53\u4F60\u89E6\u53D1\u56FE\u7247\u6216\u94FE\u63A5\u547D\u4EE4\u65F6\uFF0C\u5C06\u4F1A\u663E\u793A\u66F4\u591A\u9009\u9879\u5BF9\u8BDD\u6846\u3002",
  "Show media modal": "\u663E\u793A\u5A92\u4F53\u9009\u9879\u5BF9\u8BDD\u6846",
  "If enabled, the dialog will be displayed when you click the audio, video, iframe command.": "\u5F00\u542F\u540E\uFF0C\u5F53\u4F60\u89E6\u53D1Audio\uFF0CVideo\u548CIframe\u547D\u4EE4\u65F6\uFF0C\u5C06\u4F1A\u663E\u793A\u66F4\u591A\u9009\u9879\u5BF9\u8BDD\u6846\u3002",
  "Show tips in images and link code": "\u56FE\u7247\u548C\u94FE\u63A5\u4EE3\u7801\u5360\u4F4D\u63D0\u793A\u6587\u5B57",
  "If enabled, tips text will be added when inserting images or link code.": "\u5F00\u542F\u540E\uFF0C\u751F\u6210\u7684\u56FE\u7247\u548C\u94FE\u63A5\u4EE3\u7801\u4E2D\uFF0C\u5C06\u4F1A\u663E\u793A\u5360\u4F4D\u63D0\u793A\u6587\u5B57\u3002",
  "Use only standard Markdown code": "\u4EC5\u7528\u6807\u51C6Markdown\u683C\u5F0F",
  "If enabled, only code in standard Markdown format will be generated.": "\u5F00\u542F\u540E\uFF0C\u4EC5\u4F7F\u7528\u6807\u51C6Markdown\u683C\u5F0F\u751F\u6210\u4EE3\u7801\u3002",
  "Date format": "\u65E5\u671F\u683C\u5F0F\u5316",
  "Date formatting codes, Y, M, D, d represent year, month, day, and week respectively.": "\u63D2\u5165\u65E5\u671F\u65F6\u7684\u4EE3\u7801\u683C\u5F0F\u5316\uFF0CYYYY, MM, DD, dddd \u5206\u522B\u4EE3\u8868\u5E74\uFF0C\u6708\uFF0C\u65E5\u548C\u661F\u671F\u3002",
  "Time format": "\u65F6\u95F4\u683C\u5F0F",
  "Time formatting codes, Y, M, D, H, m, s represent year, month, day, hour, minute, and second respectively.": "\u63D2\u5165\u65F6\u95F4\u65F6\u7684\u4EE3\u7801\u683C\u5F0F\uFF0CYYYY, MM, DD, HH, mm, ss\u5206\u522B\u4EE3\u8868\u5E74\uFF0C\u6708\uFF0C\u65E5\uFF0C\u65F6\uFF0C\u5206\uFF0C\u79D2\u3002",
  "Choose which codes enable": "\u9009\u62E9\u5F00\u542F\u54EA\u4E9B\u547D\u4EE4",
  "Only the code you checked is added to the list of commands.": "\u53EA\u6709\u4F60\u9009\u62E9\u7684\u547D\u4EE4\u624D\u4F1A\u6DFB\u52A0\u5230\u547D\u4EE4\u9762\u677F\u4E2D\u3002",
  "Choose which show in context menu": "\u9009\u62E9\u54EA\u4E9B\u547D\u4EE4\u6DFB\u52A0\u5230\u53F3\u952E\u83DC\u5355",
  "Only the code you checked is added to the list of context menu.": "\u53EA\u6709\u4F60\u9009\u62E9\u7684\u547D\u4EE4\u624D\u4F1A\u6DFB\u52A0\u5230\u53F3\u952E\u83DC\u5355\u4E2D\u3002",
  "Custom codes": "\u7528\u6237\u81EA\u5B9A\u4E49\u547D\u4EE4",
  'Format: \nName::Code::menu\n\nExample: \nMy Link::<a href="{cursor}">{selection}</a>::menu': '\u683C\u5F0F\uFF1A \nName::Code::menu\n\n\u4F8B\u5982\uFF1A\nMy Link::<a href="{cursor}">{selection}</a>::menu',
  "settings.customCodeDesc": '1. \u6BCF\u4E2A\u547D\u4EE4\u5355\u72EC\u5360\u4E00\u884C\n2. \u683C\u5F0F\uFF1AName::Code::menu\n3. ::menu\u4EE3\u8868\u540C\u65F6\u6DFB\u52A0\u5230\u53F3\u952E\u83DC\u5355\n4. \u53D8\u91CF\uFF1A{selection}\u4EE3\u8868\u9009\u4E2D\u7684\u6587\u5B57\uFF0C{cursor}\u4EE3\u8868\u5149\u6807\u4F4D\u7F6E\uFF0C\u9ED8\u8BA4\u5728\u63D2\u5165\u4EE3\u7801\u7684\u6700\u540E\n5. ::\u5F00\u5934\u7684\u884C\u662F\u6CE8\u91CA\u5C06\u4F1A\u5FFD\u7565\n6. \u6362\u884C\u7528\\n\u4EE3\u66FF\n7. \u5982\u9700\u8F6C\u4E49":"\u7528\\:\u4EE3\u66FF'
};

// src/lang/locale/zh-tw.ts
var zh_tw_default = {};

// src/lang/helpers.ts
var localeMap = {
  ar: ar_default,
  cs: cz_default,
  da: da_default,
  de: de_default,
  en: en_default,
  "en-gb": en_gb_default,
  es: es_default,
  fr: fr_default,
  hi: hi_default,
  id: id_default,
  it: it_default,
  ja: ja_default,
  ko: ko_default,
  nl: nl_default,
  nn: no_default,
  pl: pl_default,
  pt: pt_default,
  "pt-br": pt_br_default,
  ro: ro_default,
  ru: ru_default,
  tr: tr_default,
  "zh-cn": zh_cn_default,
  "zh-tw": zh_tw_default
};
var locale = localeMap[import_obsidian.moment.locale()];
function t(str) {
  return locale && locale[str] || en_default[str] || str;
}

// src/ui/ColorPicker.ts
var ColorPickerModal = class extends import_obsidian2.Modal {
  constructor(app, plugin, callback) {
    super(app);
    this.color = "#ffffff";
    this.callback = callback;
    this.plugin = plugin;
  }
  triggerCallback() {
    if (this.callback)
      this.callback(this.color);
    this.close();
  }
  onOpen() {
    const { contentEl } = this;
    const colors2 = this.plugin.settings.commonColors.split("\n").filter((item) => item !== "").map((item) => typeof item === "string" ? item.trim() : item);
    contentEl.createEl("h2", { text: t("Choose a color") });
    const div = contentEl.createDiv();
    div.addClass("color-contain");
    colors2.forEach((color, index) => {
      (() => {
        const colorDiv = div.createDiv();
        colorDiv.setAttribute("title", `${color}`);
        colorDiv.addClass("color-item");
        colorDiv.setCssProps({ "background-color": `${color}` });
        colorDiv.onclick = () => {
          this.color = color;
          this.triggerCallback();
        };
      })();
    });
    const bottom = div.createDiv();
    bottom.addClass("color-bottom");
    const more = bottom.createEl("button", { text: "" });
    more.addClass("color-more");
    more.onclick = () => {
      colorInput.click();
    };
    const colorWrap = more.createSpan();
    colorWrap.setAttribute("title", this.color);
    colorWrap.addClass("color-wrap");
    colorWrap.setCssProps({ "background-color": `${this.color}` });
    const colorInput = colorWrap.createEl("input");
    colorInput.type = "color";
    colorInput.value = this.color;
    colorInput.onchange = (event) => {
      this.color = colorInput.value;
      colorWrap.setCssProps({ "background-color": `${this.color}` });
      colorWrap.setAttribute("title", this.color);
    };
    const moreText = more.createEl("span", { text: "\u{1F3A8}" });
    moreText.setAttribute("title", t("More colors"));
    moreText.addClass("color-more-text");
    const okButton = bottom.createEl("button", { text: "OK" });
    okButton.setAttribute("title", t("Use this color"));
    okButton.addClass("color-ok-btn");
    okButton.onclick = () => {
      this.triggerCallback();
    };
    setTimeout(() => {
      contentEl.addEventListener("keyup", (event) => {
        if (event.key === "Enter") {
          okButton.click();
        }
        if (event.key === "Escape") {
          this.close();
        }
      });
    }, 500);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/ui/Dialog.ts
var import_obsidian3 = require("obsidian");
var DialogModal = class extends import_obsidian3.Modal {
  constructor(app, type, selectionVal, callback) {
    super(app);
    this.val1 = "";
    this.val2 = "";
    this.val3 = "";
    this.val4 = "";
    this.val5 = "";
    this.selectionVal = selectionVal;
    this.type = type;
    this.callback = callback;
  }
  triggerCallback() {
    if (this.callback)
      this.callback(this.val1, this.val2, this.val3, this.val4, this.val5);
    this.close();
  }
  onOpen() {
    const { contentEl } = this;
    if (this.type === "Image") {
      this.createImageForm(contentEl);
    }
    if (this.type === "Link") {
      this.createLinkForm(contentEl);
    }
    if (this.type === "Audio") {
      this.createAudioForm(contentEl);
    }
    if (this.type === "Video") {
      this.createVideoForm(contentEl);
    }
    if (this.type === "Iframe") {
      this.createIframeForm(contentEl);
    }
    const split = contentEl.createEl("div");
    split.addClass("dlg-split");
    const okButton = contentEl.createEl("button", { text: "OK" });
    const cancelButton = contentEl.createEl("button", { text: "Cancel" });
    cancelButton.addClass("dlg-cancel-btn");
    cancelButton.onclick = () => {
      this.close();
    };
    okButton.onclick = () => {
      this.triggerCallback();
    };
    setTimeout(() => {
      contentEl.addEventListener("keyup", (event) => {
        if (event.key === "Enter") {
          okButton.click();
        }
        if (event.key === "Escape") {
          cancelButton.click();
        }
      });
    }, 500);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  //创建图片表单
  createImageForm(contentEl) {
    this.createSource(contentEl, "val2", t("Please input the image address"));
    this.createWidthAndHeight(contentEl, "val4", "val5");
    this.createAltAndTitle(contentEl, "val1", t("Please input the image alter"), "val3", t("Please input the image title"));
  }
  //创建链接表单
  createLinkForm(contentEl) {
    this.createSource(contentEl, "val2", t("Please input the link address"));
    this.createAltAndTitle(contentEl, "val1", t("Please input the link name"), "val3", t("Please input the link title"), t("Must"));
  }
  //创建音频表单
  createAudioForm(contentEl) {
    this.createSource(contentEl, "val1", t("Please input the audio address"));
  }
  //创建视频表单
  createVideoForm(contentEl) {
    this.createSource(contentEl, "val3", t("Please input the video address"));
    contentEl.createEl("div", { text: t("Please select the type of the video") }).addClass("dlg-label");
    const dropdown = contentEl.createEl("select");
    dropdown.createEl("option", { text: "mp4", value: "mp4" });
    dropdown.createEl("option", { text: "ogg", value: "ogg" });
    dropdown.createEl("option", { text: "webm", value: "webm" });
    this.val4 = "mp4";
    dropdown.onchange = (event) => {
      this.val4 = dropdown.value;
    };
    this.createWidthAndHeight(contentEl, "val1", "val2");
  }
  //创建iframe表单
  createIframeForm(contentEl) {
    this.createSource(contentEl, "val3", t("Please input the url address"));
    this.createWidthAndHeight(contentEl, "val1", "val2");
  }
  createWidthAndHeight(contentEl, wval, hval, title) {
    contentEl.createEl("div", { text: title || t("Please input the width and height") }).addClass("dlg-label");
    const wInput = contentEl.createEl("input");
    wInput.type = "number";
    wInput.placeholder = t("Width optional");
    wInput.setCssProps({ "width": "120px" });
    wInput.onchange = (event) => {
      this[wval] = wInput.value;
    };
    contentEl.createEl("span", { text: " x " });
    const hInput = contentEl.createEl("input");
    hInput.type = "number";
    hInput.placeholder = t("Height optional");
    hInput.setCssProps({ "width": "120px" });
    hInput.onchange = (event) => {
      this[hval] = hInput.value;
    };
  }
  createSource(contentEl, val, title) {
    contentEl.createEl("div", { text: title }).addClass("dlg-label");
    const input = contentEl.createEl("input");
    input.type = "text";
    input.setCssProps({ "width": "100%" });
    input.onchange = (event) => {
      this[val] = input.value;
    };
  }
  createAltAndTitle(contentEl, alt, altLabel, title, titleLabel, placeholder) {
    contentEl.createEl("div", { text: altLabel }).addClass("dlg-label");
    const altInput = contentEl.createEl("input");
    altInput.placeholder = placeholder || t("Optional");
    altInput.value = this.selectionVal || "";
    altInput.type = "text";
    altInput.onchange = (event) => {
      this[alt] = altInput.value;
    };
    contentEl.createEl("div", { text: titleLabel }).addClass("dlg-label");
    const titleInput = contentEl.createEl("input");
    titleInput.placeholder = t("Optional");
    titleInput.type = "text";
    titleInput.onchange = (event) => {
      this[title] = titleInput.value;
    };
  }
};

// src/utils/common.ts
function setCursor(editor, num = 0, row = 0) {
  const curserStart = editor.getCursor("from");
  const curserEnd = editor.getCursor("to");
  editor.setCursor(
    curserStart.line + row || 0,
    curserEnd.ch + num || 0
  );
}

// src/feature/QuickInsert.ts
var QuickInsert = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  //注册快速插入Markdown代码命令
  registerQuickInsertCommand() {
    markdownCodes.forEach((item, index) => {
      this.plugin.addCommand({
        id: "own:" + item.key.replace(/\s+/g, "-").toLowerCase(),
        name: item.key + (this.plugin.isCN ? `\uFF08${item.name}\uFF09` : ""),
        //name: item.key.replace(/([a-z])([A-Z])/g, '$1 $2') + (this.plugin.isCN?`（${item.name}）`:''),
        editorCheckCallback: (checking, editor, view) => {
          if (this.plugin.settings.quickInsert && this.plugin.settings.allowCodeList.includes(item.key)) {
            if (!checking) {
              this.dealMarkdownCodes(item, editor, view);
            }
            return true;
          }
          return false;
        }
      });
    });
    this.registerCustomCodesCommand();
    this.plugin.addCommand({
      id: "own:clear-formatting",
      name: "Clear formatting" + (this.plugin.isCN ? `\uFF08\u6E05\u9664\u683C\u5F0F\uFF09` : ""),
      editorCallback: (editor, view) => {
        const selection = editor.getSelection();
        const isMultiLine = selection.includes("\n");
        let newVal = "";
        if (isMultiLine) {
          selection.split("\n").forEach((line) => {
            newVal += this.clearFormatting(line);
          });
          editor.replaceSelection(newVal);
          return;
        }
        editor.replaceSelection(this.clearFormatting(selection).trim());
      }
    });
    return this;
  }
  // 用户自定义格式命令
  registerCustomCodesCommand() {
    const { customCodes } = this.plugin.settings;
    if (!customCodes)
      return;
    const customCodesArr = customCodes.split("\n").filter((item) => item !== "").map((item) => typeof item === "string" ? item.trim() : item);
    customCodesArr.forEach((line) => {
      if (line.startsWith("::"))
        return;
      let [name, code] = line.split("::");
      if (!name || !`${name}`.trim() || !code || !`${code}`.trim())
        return;
      name = name.replace(/\\:/g, ":");
      code = code.replace(/\\:/g, ":");
      this.plugin.addCommand({
        id: "custom:" + name.trim().replace(/\s+/g, "-").toLowerCase(),
        name: "custom: " + name.trim(),
        editorCallback: (editor, view) => {
          const selection = editor.getSelection();
          if (selection.trim().includes("\n")) {
            let newVal = "";
            selection.split("\n").forEach((line2) => {
              const newText2 = code.replace("{selection}", line2.trim());
              newVal += (line2 ? newText2.replace("{cursor}", "") : "") + "\n";
            });
            editor.replaceSelection(newVal.replace(/\n$/, ""));
            return;
          }
          const newText = code.replace("{selection}", selection);
          const cursor = newText.indexOf("{cursor}") - newText.length + "{cursor}".length;
          editor.replaceSelection(newText.replace("{cursor}", ""));
          if (code.includes("{cursor}")) {
            this.setCursor(editor, cursor);
          }
        }
      });
    });
    return this;
  }
  //更新用户自定义命令
  // see https://forum.obsidian.md/t/add-possibility-of-removing-a-command/77455
  // see https://github.com/marcusolsson/obsidian-projects/blob/86ba1ddb6a858ea531346331f61bee6dcfb1e55c/src/main.ts#L234
  updateCustomCodesCommand() {
    const registeredCommandIds = new Set(
      // @ts-ignore
      Object.keys(this.plugin.app.commands.commands).filter((id) => {
        return id.startsWith(`${PLUGIN_ID}:custom:`);
      })
    );
    registeredCommandIds.forEach((id) => {
      this.plugin.app.commands.removeCommand(id);
    });
    this.registerCustomCodesCommand();
  }
  // 注册右键菜单命令
  registerContextMenu() {
    this.plugin.registerEvent(
      this.plugin.app.workspace.on("editor-menu", (menu, editor, view) => {
        if (!this.plugin.settings.showCommandMenu) {
          return;
        }
        menu.addItem((item) => {
          item.setTitle("II-Quicker").setIcon("wand").onClick(async () => {
            new import_obsidian4.Notice("Please set up the submenu first");
          });
          const subMenu = item == null ? void 0 : item.setSubmenu();
          if (this.plugin.settings.subMenus.length > 0) {
            markdownCodes.forEach((code) => {
              if (!this.plugin.settings.subMenus.includes(code.key)) {
                return;
              }
              subMenu.addItem((sub) => {
                sub.setTitle(code.key + (this.plugin.isCN ? `\uFF08${code.name}\uFF09` : "")).onClick(async () => {
                  this.dealMarkdownCodes(code, editor, view, true);
                });
              });
            });
          }
          subMenu.addItem((sub) => {
            sub.setTitle("Clear formatting" + (this.plugin.isCN ? `\uFF08\u6E05\u9664\u683C\u5F0F\uFF09` : "")).onClick(async () => {
              const selection = editor.getSelection();
              const isMultiLine = selection.includes("\n");
              let newVal = "";
              if (isMultiLine) {
                selection.split("\n").forEach((line) => {
                  newVal += this.clearFormatting(line);
                });
                editor.replaceSelection(newVal.replace(/\n$/, ""));
                return;
              }
              editor.replaceSelection(this.clearFormatting(selection).replace(/\n$/, ""));
            });
          });
          const { customCodes } = this.plugin.settings;
          if (!customCodes)
            return;
          const customCodesArr = customCodes.split("\n").filter((item2) => item2 !== "").map((item2) => typeof item2 === "string" ? item2.trim() : item2);
          let count = 0;
          customCodesArr.forEach((line, index) => {
            if (line.startsWith("::"))
              return;
            let [name, code, showMenu] = line.split("::");
            if (!name || !`${name}`.trim() || !code || !`${code}`.trim() || !showMenu || !`${showMenu}`.trim())
              return;
            name = name.replace(/\\:/g, ":");
            code = code.replace(/\\:/g, ":");
            if (count++ === 0)
              subMenu.addSeparator();
            subMenu.addItem((sub) => {
              sub.setTitle(name.trim()).onClick(async () => {
                const selection = editor.getSelection();
                if (selection.trim().includes("\n")) {
                  let newVal = "";
                  selection.split("\n").forEach((line2) => {
                    const newText2 = code.replace("{selection}", line2.trim());
                    newVal += (line2 ? newText2.replace("{cursor}", "") : "") + "\n";
                  });
                  editor.replaceSelection(newVal.replace(/\n$/, ""));
                  return;
                }
                const newText = code.replace("{selection}", selection.trim());
                const cursor = newText.indexOf("{cursor}") - newText.length + "{cursor}".length;
                editor.replaceSelection(newText.replace("{cursor}", "") + "\n");
                if (code.includes("{cursor}")) {
                  this.setCursor(editor, cursor, -1);
                } else {
                  this.setCursor(editor, 0, -1);
                }
              });
            });
          });
        });
      })
    );
    return this;
  }
  // markdown代码处理函数
  dealMarkdownCodes(item, editor, view, contextMenu = false) {
    const selectVal = editor.getSelection();
    const isMultiLine = selectVal.includes("\n");
    const replaceMultiLine = (fn, cursor = 0) => {
      if (!selectVal.trim()) {
        editor.replaceSelection(fn("") + "\n");
        this.setCursor(editor, cursor || 0, -1);
        return;
      }
      let newVal = "";
      selectVal.split("\n").forEach((line) => {
        newVal += (line ? fn(line) : "") + "\n";
      });
      editor.replaceSelection(newVal.replace(/\n$/, ""));
    };
    const aloneCodes = ["H1", "H2", "H3", "H4", "H5", "H6", "Tag", "Horizontal rule", "Indent", "Bullet list", "Numbered list", "Task list", "Quote", "Table", "Anchor", "Variables", "Footnotes", "Callout", "Image link", "Email", "PDF"];
    if (aloneCodes.includes(item.key)) {
      if (isMultiLine)
        return replaceMultiLine((line) => item.code + line, item.cursor);
      editor.replaceSelection(item.code + selectVal);
    }
    const wrapCodes = ["Bold", "Italic", "Strikethrough", "Highlight", "Underline", "Sup", "Sub", "Code", "Code block", "Align left", "Align right", "Align center", "Align justify", "Html comment", "Ob comment", "Math line", "Math block", "Wiki link", "Wiki image", "Block quote", "Block quote global"];
    if (wrapCodes.includes(item.key)) {
      if (this.plugin.settings.onlyStandardCode) {
        item.code = "<mark>{}</mark>";
        item.cursor = -7;
      }
      if (isMultiLine)
        return replaceMultiLine((line) => item.code.replace("{}", line), item.cursor);
      editor.replaceSelection(item.code.replace("{}", selectVal));
      if (!selectVal && item.cursor) {
        this.setCursor(editor, item.cursor);
      }
    }
    if (["Color", "Background color"].includes(item.key)) {
      if (this.plugin.settings.showColorPicker) {
        new ColorPickerModal(this.plugin.app, this.plugin, (color) => {
          if (isMultiLine)
            return replaceMultiLine((line) => item.code.replace("{1}", color).replace("{2}", line), item.cursor);
          const colorCode = item.code.replace("{1}", color).replace("{2}", selectVal);
          editor.replaceSelection(colorCode);
          if (!selectVal && item.cursor) {
            this.setCursor(editor, item.cursor);
          }
        }).open();
      } else {
        if (isMultiLine)
          return replaceMultiLine((line) => item.code.replace("{1}", "").replace("{2}", line), item.cursor);
        const colorCode = item.code.replace("{1}", "").replace("{2}", selectVal);
        editor.replaceSelection(colorCode);
        if (!selectVal && item.cursor) {
          this.setCursor(editor, item.cursor);
        }
      }
    }
    if (["Date", "Time"].includes(item.key)) {
      let tempDateTime = item.key;
      if (item.key === "Date") {
        tempDateTime = this.plugin.settings.date || item.key;
      } else {
        tempDateTime = this.plugin.settings.time || item.key;
      }
      editor.replaceSelection((0, import_obsidian4.moment)().format(tempDateTime));
    }
    if (["Link", "Image"].includes(item.key)) {
      const isShowTips = this.plugin.settings.showImgLinkTipText;
      const tipsText = isShowTips ? "LinkTitle" : "";
      const defText = "Link" === item.key ? tipsText : "";
      if (this.plugin.settings.showImgLinkDialog) {
        new DialogModal(this.plugin.app, item.key, selectVal.trim(), (val1, val2, val3, val4, val5) => {
          const ln = contextMenu ? "\n" : "";
          if (val4 && "Image" === item.key) {
            if (this.plugin.settings.onlyStandardCode) {
              editor.replaceSelection(`<img src="${val2}" alt="${val1}" title="${val3}" width="${val4}" height="${val5}" />`);
            } else {
              let alt = val1;
              if (val4 && val5) {
                alt += "|" + val4 + "x" + val5;
              } else if (val4) {
                alt += "|" + val4;
              }
              const val = item.code.replace("{1}", alt).replace("{2}", val2).replace("{3}", val3);
              editor.replaceSelection(val + ln);
            }
          } else {
            const val = item.code.replace("{1}", val1 || selectVal.trim() || defText).replace("{2}", val2).replace("{3}", val3);
            editor.replaceSelection(val + ln);
          }
          if (contextMenu)
            this.setCursor(editor, item.cursor || 0, -1);
        }).open();
      } else {
        if (isMultiLine)
          return replaceMultiLine((line) => item.code.replace("{1}", line || defText).replace("{2}", isShowTips ? "link" : "").replace("{3}", isShowTips ? "title" : "").replace("{4}", ""), item.cursor);
        const val = item.code.replace("{1}", selectVal || defText).replace("{2}", isShowTips ? "link" : "").replace("{3}", isShowTips ? "title" : "").replace("{4}", "");
        editor.replaceSelection(val);
        if (!selectVal && item.cursor) {
          this.setCursor(editor, item.cursor + (this.plugin.settings.showImgLinkTipText ? -5 : 0));
        }
      }
    }
    if (["Audio", "Video", "Iframe"].includes(item.key)) {
      if (this.plugin.settings.showMediaDialog) {
        new DialogModal(this.plugin.app, item.key, selectVal.trim(), (val1, val2, val3, val4) => {
          const replace = item.code.replace("{1}", val1).replace("{2}", val2).replace("{3}", val3).replace("{4}", val4);
          const ln = contextMenu ? "\n" : "";
          editor.replaceSelection(replace + ln);
          if (contextMenu)
            this.setCursor(editor, item.cursor || 0, -1);
        }).open();
      } else {
        if (item.key === "Audio") {
          editor.replaceSelection(item.code.replace("{1}", ""));
        } else {
          editor.replaceSelection(item.code.replace("{1}", "640").replace("{2}", "420").replace("{3}", "").replace("{4}", "mp4"));
        }
        if (!selectVal && item.cursor) {
          this.setCursor(editor, item.cursor);
        }
      }
    }
  }
  setCursor(editor, num = 0, row = 0) {
    return setCursor(editor, num, row);
  }
  // 清除格式函数
  clearFormatting(line) {
    line = line.replace(/^#{1,6}\s?/, "");
    line = line.replace(/^(```|---)/g, "");
    line = line.replace(/[*_=~]{3,}(.*?)[*_]{3,}/g, "$1");
    line = line.replace(/[_*=~]{2}(.*?)[_*=~]{2}/g, "$1");
    line = line.replace(/[_*`](.*?)[_*`]/g, "$1");
    line = line.replace(/\s*\d.\s/g, "");
    line = line.replace(/\s*-\s\[(.|\s)\]\s/g, "");
    line = line.replace(/\s*-\s/g, "");
    line = line.replace(/\s*>+\s/g, "");
    line = line.replace(/^(\s|\t)+/g, "");
    line = line.replace(/!?\[([^]]*?)\]\(([^)]*?)\)/g, "$1 $2");
    line = line.replace(/\$([^$]*?)\$/g, "$1");
    line = line.replace(/^\$\$/g, "");
    line = line.replace(/<!--.*?-->/g, "");
    line = line.replace(/^(<!--|-->)/g, "");
    line = line.replace(/%%(.*?)%%/g, "$1");
    line = line.replace(/^%%/g, "");
    line = line.replace(/!?\[([^\]]*?)\]\(([^\)]*?)\)/g, "$1 $2");
    line = line.replace(/\[\[(.*?#\^\^?([^\]]*?))\]\]/g, "$1");
    line = line.replace(/!?\[\[([^\]]*?)\]\]/g, "$1");
    line = line.replace(/<([^>]*?@[^>]*?\.[^>]*?)>/g, "$1");
    line = line.replace(/<a[^>]*?href="([^"]*?)"[^>]*?><img[^>]*?src="([^"]*?)"[^>]*?\/><\/a>/g, "$2-->$1");
    line = line.replace(/<(https?:\/\/[^>]*?)>/g, "$1");
    line = line.replace(/<a[^>]*?href="([^"]*?)"[^>]*?>([^<]*?)<\/a>/g, "$2 $1");
    line = line.replace(/<img[^>]*?src="([^"]*?)"[^>]*?\/?>/g, "image: $1");
    line = line.replace(/<audio[^>]*?src="([^"]*?)"[^>]*?><\/audio>/g, "audio: $1");
    line = line.replace(/<video[^>]*?><source\s+src="([^"]*?)"[^>]*?><\/video>/g, "video: $1");
    line = line.replace(/<iframe[^>]*?src="([^"]*?)"[^>]*?><\/iframe>/g, "iframe: $1");
    line = line.replace(/<[^>]*?\/?>/g, "");
    return line + "\n";
  }
};

// src/ui/Settings.ts
var DEFAULT_SETTINGS = {
  quickInsert: true,
  showColorPicker: true,
  showImgLinkDialog: false,
  showMediaDialog: false,
  showImgLinkTipText: false,
  commonColors: colors.join("\n"),
  date: "YYYY-MM-DD ddd",
  time: "YYYY-MM-DD HH:mm:ss",
  onlyStandardCode: false,
  allowCodeList: markdownCodes.map((item) => item.key),
  subMenus: defContextCodes,
  showCommandMenu: true,
  customCodes: ""
};
var IISettingTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian5.Setting(containerEl).setName(t("Show command in context menu")).setDesc(t("If enabled, the command context menu will be displayed when you right-click.")).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showCommandMenu).onChange(async (value) => {
        this.plugin.settings.showCommandMenu = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian5.Setting(containerEl).setName(t("Show color picker modal")).setDesc(t("If enabled, the color picker modal will be displayed when you click the color command.")).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showColorPicker).onChange(async (value) => {
        this.plugin.settings.showColorPicker = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian5.Setting(containerEl).setName(t("Common color codes")).setDesc(t("The color code here will be displayed in the color dialog modal, with each color code on a separate line.")).setClass("setting-color-codes").addTextArea((textArea) => {
      textArea.setValue(this.plugin.settings.commonColors).onChange(async (value) => {
        this.plugin.settings.commonColors = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian5.Setting(containerEl).setName(t("Show image and link modal")).setDesc(t("If enabled, the dialog will be displayed when you click the link or image command.")).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showImgLinkDialog).onChange(async (value) => {
        this.plugin.settings.showImgLinkDialog = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian5.Setting(containerEl).setName(t("Show media modal")).setDesc(t("If enabled, the dialog will be displayed when you click the audio, video, iframe command.")).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showMediaDialog).onChange(async (value) => {
        this.plugin.settings.showMediaDialog = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian5.Setting(containerEl).setName(t("Show tips in images and link code")).setDesc(t("If enabled, tips text will be added when inserting images or link code.")).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showImgLinkTipText).onChange(async (value) => {
        this.plugin.settings.showImgLinkTipText = value;
      });
    });
    new import_obsidian5.Setting(containerEl).setName(t("Use only standard Markdown code")).setDesc(t("If enabled, only code in standard Markdown format will be generated.")).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.onlyStandardCode).onChange(async (value) => {
        this.plugin.settings.onlyStandardCode = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian5.Setting(containerEl).setName(t("Date format")).setDesc(t("Date formatting codes, Y, M, D, d represent year, month, day, and week respectively.")).setClass("setting-date-format").addText((text) => {
      text.setValue(this.plugin.settings.date).onChange(async (value) => {
        this.plugin.settings.date = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian5.Setting(containerEl).setName(t("Time format")).setDesc(t("Time formatting codes, Y, M, D, H, m, s represent year, month, day, hour, minute, and second respectively.")).setClass("setting-time-format").addText((text) => {
      text.setValue(this.plugin.settings.time).onChange(async (value) => {
        this.plugin.settings.time = value;
      });
    });
    const codeControlEl = new import_obsidian5.Setting(containerEl).setName(t("Choose which codes enable")).setDesc(t("Only the code you checked is added to the list of commands.")).controlEl;
    this.createCheckList(codeControlEl, "allowCodeList");
    const menuControlEl = new import_obsidian5.Setting(containerEl).setName(t("Choose which show in context menu")).setDesc(t("Only the code you checked is added to the list of context menu.")).controlEl;
    this.createCheckList(menuControlEl, "subMenus");
    const customDescNode = document.createElement("div");
    customDescNode.addClass("settings-custom-code-desc");
    const customDescT = t("settings.customCodeDesc");
    customDescT.split("\n").forEach((item) => customDescNode.createEl("div", { text: item }));
    const customDescFragment = document.createDocumentFragment();
    customDescFragment.append(customDescNode);
    let customCodeTimer = null;
    new import_obsidian5.Setting(containerEl).setName(t("Custom codes")).setDesc(customDescFragment).setClass("setting-custom-code").addTextArea((textArea) => {
      textArea.setValue(this.plugin.settings.customCodes).setPlaceholder(t('Format: \nName::Code::menu\n\nExample: \nMy Link::<a href="{cursor}">{selection}</a>::menu')).onChange(async (value) => {
        this.plugin.settings.customCodes = value;
        await this.plugin.saveSettings();
        if (customCodeTimer) {
          clearTimeout(customCodeTimer);
        }
        customCodeTimer = setTimeout(() => {
          new QuickInsert(this.plugin).updateCustomCodesCommand();
        }, 3e3);
      });
    });
  }
  //创建checklist列表
  createCheckList(controlEl, allowList) {
    const codeList = controlEl.createDiv();
    codeList.addClass("settings-checkbox-list");
    markdownCodes.forEach((item) => {
      const checkbox = codeList.createEl("label", { text: this.plugin.isCN ? item.name : item.key }).createEl("input", { type: "checkbox", value: item.key });
      if (checkbox) {
        checkbox.checked = this.plugin.settings[allowList].includes(item.key);
        checkbox.onchange = async () => {
          if (checkbox.checked) {
            if (!this.plugin.settings[allowList].includes(checkbox.value)) {
              this.plugin.settings[allowList].push(checkbox.value);
            }
          } else {
            this.plugin.settings[allowList] = this.plugin.settings[allowList].filter((item2) => item2 !== checkbox.value);
          }
          await this.plugin.saveSettings();
        };
      }
    });
  }
};

// src/main.ts
var import_obsidian6 = require("obsidian");
var PLUGIN_ID = "ii-quicker";
var IIPlugin2 = class extends import_obsidian6.Plugin {
  constructor() {
    super(...arguments);
    this.isCN = import_obsidian6.moment.locale() === "zh-cn";
    this.isMobile = import_obsidian6.Platform.isMobileApp;
  }
  async onload() {
    await this.loadSettings();
    this.registerQuickInsertEvent();
    this.registerColorPanelCommand();
    this.addSettingTab(new IISettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  //注册快速插入Markdown代码命令和注册右键菜单
  registerQuickInsertEvent() {
    if (!this.settings.quickInsert)
      return;
    new QuickInsert(this).registerQuickInsertCommand().registerContextMenu();
  }
  //注册颜色面板命令
  registerColorPanelCommand() {
    this.addCommand({
      id: "own:color-panel",
      name: "Color panel" + (this.isCN ? `\uFF08\u989C\u8272\u9762\u677F\uFF09` : ""),
      editorCheckCallback: (checking, editor, view) => {
        if (this.settings.quickInsert) {
          if (!checking) {
            new ColorPickerModal(
              this.app,
              this,
              (color) => {
                editor.replaceSelection(color);
              }
            ).open();
          }
          return true;
        }
        return false;
      }
    });
  }
};
