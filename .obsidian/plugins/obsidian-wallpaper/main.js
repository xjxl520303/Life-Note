/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Wallpaper
});
module.exports = __toCommonJS(main_exports);

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  wallpaperId: "none"
};
var WallpaperSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Wallpaper Board" });
    new import_obsidian.Setting(containerEl).setName("Wallpaper").setDesc("Choose a wallpaper").addDropdown((dropdown) => {
      dropdown.addOption("none", "None");
      dropdown.addOption("stars1", "Stars1");
      dropdown.addOption("stars2", "Stars2");
      dropdown.addOption("stars3", "Stars3");
      dropdown.addOption("skyandsea", "Sky and Sea");
      dropdown.addOption("campfire", "Campfire");
      dropdown.setValue(this.plugin.settings.wallpaperId);
      dropdown.onChange(async (value) => {
        if (value == this.plugin.settings.wallpaperId)
          return;
        this.plugin.paint(value);
        this.plugin.settings.wallpaperId = value;
        await this.plugin.saveSettings();
      });
    });
  }
};

// src/main.ts
var import_obsidian2 = require("obsidian");

// src/wallpaper/campfire.ts
function paintCampfire(plugin) {
  plugin.resetWallpaper();
  let wallpaper = plugin.containerEl.querySelector(".wallpaper");
  if (!wallpaper) {
    plugin.resetWallpaper();
    wallpaper = plugin.containerEl.querySelector(".wallpaper");
  }
  if (!wallpaper)
    return;
  wallpaper.classList.add("wallpaper-campfire");
  if (plugin.app.vault.getConfig("theme") === "obsidian") {
    plugin.app.setTheme("moonstone");
    plugin.app.vault.setConfig("theme", "moonstone");
    plugin.app.workspace.trigger("css-change");
  }
  const wrapper = wallpaper.createDiv("campfire-wrapper");
  wrapper.innerHTML = `
  <div class="tree-container-back">
			<div class="tree-8"></div>
			<div class="tree-9"></div>
			<div class="tree-10"></div>
		</div>
		<div class="rock-container">
			<div class="rock-big"></div>
			<div class="rock-small">
				<div class="rock-1"></div>
				<div class="rock-2"></div>
				<div class="rock-3"></div>
				<div class="rock-4"></div>
			</div>
		</div>
		<div class="smoke-container">
			<svg>
			<path d="M 150 0 Q 200 100 100 250 C 0 450 120 400 50 600  " />
		</svg>
			<div class="fire-container">

				<div class="flame-1"></div>
				<div class="flame-2"></div>
				<div class="flame-3"></div>
			</div>
		</div>
		<div class="tree-container-front">
			<div class="tree-1"></div>
			<div class="tree-2"></div>
			<div class="tree-3"></div>
			<div class="tree-4"></div>
			<div class="tree-5"></div>
			<div class="tree-6"></div>
			<div class="tree-7"></div>
		</div>
  `;
}

// src/wallpaper/skyandsea.ts
function paintSkyandSea(plugin) {
  plugin.resetWallpaper();
  let wallpaper = plugin.containerEl.querySelector(".wallpaper");
  if (!wallpaper) {
    plugin.resetWallpaper();
    wallpaper = plugin.containerEl.querySelector(".wallpaper");
  }
  if (!wallpaper)
    return;
  wallpaper.classList.add("wallpaper-skyandsea");
  if (plugin.app.vault.getConfig("theme") === "obsidian") {
    plugin.app.setTheme("moonstone");
    plugin.app.vault.setConfig("theme", "moonstone");
    plugin.app.workspace.trigger("css-change");
  }
  const sky = wallpaper.createDiv("sky");
  sky.createDiv();
  sky.createDiv();
  sky.createDiv();
  const sea = wallpaper.createDiv("sea");
  sea.createDiv("sun_set_sea");
  for (let i = 0; i < 29; i++) {
    sea.createDiv();
  }
  const mountain1 = wallpaper.createDiv("mountain1");
  const mountain2 = wallpaper.createDiv("mountain2");
  const mountain3 = wallpaper.createDiv("mountain3");
  mountain1.innerHTML = "<div></div><div></div>";
  mountain2.innerHTML = "<div></div><div></div>";
  mountain3.innerHTML = "<div></div><div></div>";
  const bird = wallpaper.createDiv("bird");
  bird.innerHTML = '<div class="bird1"><div></div><div></div><div></div></div><div class="bird2"><div></div><div></div><div></div></div><div class="bird3"><div></div><div></div><div></div></div>';
  const ship = wallpaper.createDiv("ship");
  ship.innerHTML = "<div></div><div></div><div></div>";
  const plane = wallpaper.createDiv("plane");
  plane.innerHTML = "<div></div><div></div><div></div>";
  wallpaper.createDiv("tree");
}

// src/wallpaper/stars1.ts
function paintStars1(plugin) {
  plugin.resetWallpaper();
  let wallpaper = plugin.containerEl.querySelector(".wallpaper");
  if (!wallpaper) {
    plugin.resetWallpaper();
    wallpaper = plugin.containerEl.querySelector(".wallpaper");
  }
  if (!wallpaper)
    return;
  wallpaper.classList.add("wallpaper-stars1");
  if (plugin.app.vault.getConfig("theme") === "moonstone") {
    plugin.app.setTheme("obsidian");
    plugin.app.vault.setConfig("theme", "obsidian");
    plugin.app.workspace.trigger("css-change");
  }
  wallpaper.createDiv("stars1");
  wallpaper.createDiv("stars2");
  wallpaper.createDiv("stars3");
}

// src/wallpaper/stars2.ts
function paintStars2(plugin) {
  plugin.resetWallpaper();
  let wallpaper = plugin.containerEl.querySelector(".wallpaper");
  if (!wallpaper) {
    plugin.resetWallpaper();
    wallpaper = plugin.containerEl.querySelector(".wallpaper");
  }
  if (!wallpaper)
    return;
  wallpaper.classList.add("wallpaper-stars2");
  if (plugin.app.vault.getConfig("theme") === "moonstone") {
    plugin.app.setTheme("obsidian");
    plugin.app.vault.setConfig("theme", "obsidian");
    plugin.app.workspace.trigger("css-change");
  }
  wallpaper.createDiv("stars");
  wallpaper.createDiv("stars1");
  wallpaper.createDiv("stars2");
  wallpaper.createDiv("shooting-stars");
}

// src/wallpaper/stars3.ts
function paintStars3(plugin) {
  plugin.resetWallpaper();
  let wallpaper = plugin.containerEl.querySelector(".wallpaper");
  if (!wallpaper) {
    plugin.resetWallpaper();
    wallpaper = plugin.containerEl.querySelector(".wallpaper");
  }
  if (!wallpaper)
    return;
  wallpaper.classList.add("wallpaper-stars3");
  const sky = wallpaper.createDiv("sky");
  if (plugin.app.vault.getConfig("theme") === "moonstone") {
    plugin.app.setTheme("obsidian");
    plugin.app.vault.setConfig("theme", "obsidian");
    plugin.app.workspace.trigger("css-change");
  }
  const Colors = ["#f5d76e", "#f7ca18", "#f4d03f", "#ececec", "#ecf0f1", "#a2ded0"];
  const numStars = 200;
  for (let i = 0; i < numStars; i++) {
    const color = Colors[Math.floor(Math.random() * Colors.length)];
    const star = sky.createSpan();
    star.style.left = Math.floor(Math.random() * 100) + "vw";
    star.style.top = Math.floor(Math.random() * 100) + "vh";
    star.style.width = Math.random() * 2 + "px";
    star.style.height = star.style.width;
    star.style.backgroundColor = color;
  }
  setTimeout(() => {
    sky.childNodes.forEach((star) => {
      star.style.top = Math.random() * 100 + "vh";
      star.style.left = Math.random() * 100 + "vw";
    });
  }, 1);
  setInterval(() => {
    sky.childNodes.forEach((star) => {
      star.style.top = Math.random() * 100 + "vh";
      star.style.left = Math.random() * 100 + "vw";
    });
  }, 1e5);
}

// src/wallpaper/wallpaperPainter.ts
var wallpaperPainter = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.containerEl = plugin.containerEl;
    if (!this.containerEl)
      return;
  }
  // 每添加一张新壁纸，只需要在这里添加一个case即可，不需要修改主函数
  paint(id) {
    switch (id) {
      case "none":
        this.plugin.resetWallpaper();
        break;
      case "stars1":
        paintStars1(this.plugin);
        break;
      case "stars2":
        paintStars2(this.plugin);
        break;
      case "stars3":
        paintStars3(this.plugin);
        break;
      case "skyandsea":
        paintSkyandSea(this.plugin);
        break;
      case "campfire":
        paintCampfire(this.plugin);
        break;
      default:
        break;
    }
  }
};

// src/main.ts
var Wallpaper = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new WallpaperSettingTab(this.app, this));
    this.initWallpaper();
    this.paint(this.settings.wallpaperId);
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  initWallpaper() {
    console.log("initWallpaper called");
    this.containerEl = document.querySelector(".app-container");
    if (!this.containerEl)
      return;
    this.containerEl.createDiv("wallpaper");
  }
  resetWallpaper() {
    console.log("resetWallpaper called");
    this.clearWallpaper();
    this.containerEl.createDiv("wallpaper");
  }
  clearWallpaper() {
    console.log("clearWallpaper called");
    if (!this.containerEl.querySelector(".wallpaper"))
      return;
    this.containerEl.removeChild(this.containerEl.querySelector(".wallpaper"));
  }
  paint(id) {
    console.log("paint called");
    this.resetWallpaper();
    const painter = new wallpaperPainter(this);
    painter.paint(id);
  }
};
//# sourceMappingURL=data:application/json;base64,
